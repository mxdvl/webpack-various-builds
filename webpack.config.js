import webpack from "webpack";
import { merge } from "webpack-merge";
import { WebpackManifestPlugin } from "webpack-manifest-plugin";
import { resolve } from "node:path";
import { isNonNullable } from "@guardian/libs";
import { readdir, writeFile } from "node:fs/promises";

/** @type {webpack.Configuration} */
const commonConfig = {
  entry: "./src/index.js",
  mode: process.env.ENV === "production" ? "production" : "development",
  output: {
    path: resolve("./dist"),
  },
};

const bundleConfigs = await readdir(".").then((files) =>
  files
    .map((file) => file.match(/^webpack\.config\.(.+)\.js$/)?.[1])
    .filter(isNonNullable)
);

await writeFile(
  "./bundles.generated.js",
  `// DO NOT EDIT: THIS FILE IS AUTOMATICALLY GENERATED //

/** @typedef {typeof configs[number]} Bundle */

/** generated from webpack.config.js */
export const bundles = /** @type {const} @satisfies {readonly string[]} */ ([
\t${bundleConfigs.map((name) => `"${name}"`).join(",\n\t")},
]);
`,
  "utf-8"
);

export default await Promise.all(
  bundleConfigs.map(async (name) =>
    merge(commonConfig, (await import(`./webpack.config.${name}.js`)).default, {
      name,
      plugins: [
        new WebpackManifestPlugin({ fileName: `manifest.${name}.json` }),
      ],
    })
  )
);
